@startuml

skinparam stereotypeCBackgroundColor<<Struct>> pink
skinparam spotChar<<Struct>> S
hide interface field
hide enum method

note "The time duration for these will\ncome from AbstractOptions" as JPWNote

package System <<Rectangle>>
{
  class User
  {
    + User(in_username : const std::string&)
    + isAllUsers() : bool
    + username() : const std::string&
    + homeDir(FilePath& out_homeDir) : Error
    + group(std::string& out_userGroup) : Error
    + id(std::string& out_userId) : Error
    - m_username : std::string
    - m_isAllUsers : bool
  }
  note bottom of User : The homeDir, group, and id\nmethods may be implemented\nlater, as needed.

  class AsioService
  {
    + {static} asioService() : AsioService&
    + asyncWait(waitTime : const TimeDuration&, in_onTimer :  const OnTimer&)
    + asyncOperation()
    - AsioService()
    - m_ioService : boost::asio::io_service
    - m_mutex : boost::mutex
  }

  class AbstractTimedEvent
  {
    + AbstractTimedEvent(in_timer : const TimeDuration&)
    + start() : void
    + cancel() : void
    # {abstract} onTimer(in_error : const Error&) : void
    - m_timer : boost::posix::time_duration
  }

  class Error
  {
    + Error(in_code : int, in_message : const std::string&, in_location : const ErrorLocation&)
    - m_errorCode : int
    - m_errorMessage : std::string
    - m_location : ErrorLocation
  }

  class ErrorLocation
  {
    + ErrorLocation(in_file : const std::string&, in_line : long int, in_function : const std::string&)
    - m_line : long int
    - m_file : std:string
    - m_function : std::string
  }

  class FilePath
  class AsioSupervisor #lightgreen
  class Process #lightgreen
  class ProcessOptions #lightgreen
  class ProcessResult <<struct>> #lightgreen
  class ProcessCallbacks <<struct>> #lightgreen
  class AsioAsyncChildProcess #lightgreen

  AsioSupervisor -[hidden] Process
  Process -[hidden] ProcessOptions
  ProcessOptions -down[hidden]- ProcessResult
  ProcessResult -[hidden] ProcessCallbacks
  ProcessCallbacks -[hidden] AsioAsyncChildProcess

  AbstractTimedEvent -down-> AsioService : use
}

package "Job Management" as JMPackage <<Rectangle>>
{
  interface IJobRepository
  {
    + {abstract} getJobs(in_user : const std::string&) : JobList
    + {abstract} getJob(in_id : const std::string&, in_user : const std::string&) : std::shared_ptr<Job>
    + {abstract} addJob(in_job : std::shared_ptr<Job>)
    + {abstract} removeJob(in_id : const std::string&) : void
  }

  class JobRepository
  {
    + getJobs(in_user : const std::string&) : JobList
    + getJob(in_id : const std::string&, in_user : const std::string&) : std::shared_ptr<Job>
    + addJob(in_job : std::shared_ptr<Job>) : Error
    + removeJob(in_id : const std::string&) : void
    - m_jobs : JobIdMap
    - m_mutex : Mutex
  }

  class JobPruner
  {
    + JobPruner(in_jobRepo : std::shared_ptr<IJobRepository>, in_jobSource : std::shared_ptr<IJobSource>, in_onJobPrune : const OnJobPrune&)
    - onJobStatusUpdate(in_job : std::shared_ptr<Job>) : void
    - scheduleJobPrune(in_job : std::weak_ptr<Job>, in_pruneTime : boost::posix::posix_time)
    - m_jobRepo : std::shared_ptr<IJobRepository>
    - m_jobSource : std::shared_ptr<IJobSource>
    - m_onJobPrune : OnJobPrune
    - m_jobExpiryTime : boost::posix::time_duration
  }

  class JobStatusNotifier
  {
    + subscribe(in_onUpdate : const OnJobStatusUpdate&) : JobStatusSubscriptionHandle
    + subscribe(in_jobId : const std::string&, in_onUpdate : const OnJobStatusUpdate&) : JobStatusSubscriptionHandle
    - std::map<std::string, JobStatusSignal>
  }

  class JobStatusSubscription
  {
    + JobStatusSubscription(\n  in_parent : const std::weak_ptr<JobStatusNotifier>&,\n  in_jobId : const std::string&,\n  in_conn : const boost::signals2::connection&)
    - m_parent : std::weak_ptr<JobStatusNotifier>
    - m_jobId : std::string
    - m_conn : boost::signals2::connection
  }

  JobPruner .up. JPWNote

  JobStatusNotifier "1" *-- "0.." JobStatusSubscription
  JobPruner --> JobStatusNotifier : subscribes
  JobRepository ..|> IJobRepository
  JobPruner --> IJobRepository : updates
}

package Logging <<Rectangle>>
{
  enum LogLevel <<enum class>>
  {
    + OFF = 0
    + ERROR = 1
    + WARNING = 2
    + DEBUG = 3
    + INFO = 4

    + fromString(in_logLevelStr : const std::string&)
  }

  class Logger
  {
    + {static} logger(in_programId : const std::string&) : Logger&
    + setLogLevel(in_logLevel : LogLevel) : void
    + addLogDestination(in_destination : std::shared_ptr<ILogDestination>) : void
    + removeLogDestination(in_destId : unsigned int) : void
    + logError(in_error : const Error&) : void
    + logErrorAsWarning(in_error : const Error&) : void
    + logErrorAsDebug(in_error : const Error&) : void
    + logErrorAsInfo(in_error : const Error&) : void
    + logErrorMessage(in_message : const std::string&) : void
    + logWarningMessage(in_message : const std::string&) : void
    + logDebugMessage(in_message : const std::string&) : void
    + logInfoMessage(in_message : const std::string&) : void
    - formatLogEntry(in_message : const std::string&, in_escapeNewLines : bool)
    - {static} s_mutex : boost::mutex
    - m_logDestinations : std::map<unsigned int, std::shared_ptr<ILogDestination>>
    - m_logLevel : LogLevel
    - m_programId : std::string
  }

  class ILogDestination
  {
    + {abstract} getId() : unsigned int
    + {abstract} writeLog(in_programId : const std::string&, in_message : const std::string&)
  }

  class SysLogDestination
  {
    + getId() : unsigned int
    + writeLog(in_programId : const std::string&, in_message : const std::string&)
  }

  class StdErrLogDestination
  {
    + getId() : unsigned int
    + writeLog(in_programId : const std::string&, in_message : const std::string&)
  }

  class FileLogDestination #lightgreen
  {
    + FileLogWriter(in_id : unsigned int, in_logDir : const FilePath&, in_logName : const std::string&)
    + getId()
    + writeLog(in_programId : const std::string&, in_message : const std::string&)
    - m_logFile : const FilePath&
    - m_rotatedLogFile : const FilePath&
    - m_id : unsigned int
  }
}

package Options <<Rectangle>>
{
  interface IOptions <<template T>>
  {
    + {abstract} initialize() : Error
    + {abstract} readOptions(const FilePath& in_location) : Error
    # {abstract} registerOption<typename N>(const std::string& in_name, std::weak_ptr<N> io_valuePtr, const T& in_defaultValue, const std::string& in_description) : void
    # IOptions()
  }

  class AbstractOptions <<template T>> #lightblue
  {
    + {static} options() : T&
    + {abstract} initialize() : Error
    + readOptions(const FilePath& in_location) : Error
    # registerOption<typename N>(const std::string& name, std::weak_ptr<N> io_valuePtr, const T& in_defaultValue, const std::string& in_description) : void
    # AbstractOptions(const std::string& in_defaultConfigFile)
    - m_optionsDesc : boost::program_options::options_description
  }

  class AbstractUserProfiles <<template T>> #lightblue
  {
    + {static} userProfiles() : T&
    + {abstract} initialize() : Error
    + readOptions(const FilePath& in_location) : Error
    # registerOption<typename N>(const std::string& name, std::weak_ptr<N> io_valuePtr, const N& in_defaultValue, const std::string& in_description) : void
    - m_confProfile : ConfigProfile
  }

  AbstractUserProfiles *-- ConfigProfile
  AbstractUserProfiles ..|> IOptions
  AbstractOptions ..|> IOptions
}

package "Job System Api" as JobApiPackage <<Rectangle>>
{
  note "This package will be mainly the responsibility of\nthe SDK user. Conceptually, an extension of\nJobRepository or a plugin specific implementation of\nan existing interface or abstract class would belong\nhere but they are not shown as their existence is up\nto the plugin developer." as JSANote
  interface IJobSource #lightblue
  {
    + {abstract} initialize() : Error
    + {abstract} getJobs(in_user : const User&, out_jobs : JobList&) : Error
    + {abstract} getJob(in_jobId : const std::string&, in_user : const User&, in_onGetJob : const OnGetJob&, in_onError : const OnError&) : void
    + {abstract} submitJob(io_job : std::shared_ptr<Job>, in_user : const User&, in_onSubmitJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} suspendJob(in_jobId : const std::string&, in_user : const User&, in_onSuspendJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} resumeJob(in_jobId : const std::string&, in_user : const User&, in_onResumeJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} stopJob(in_jobId : const std::string&, in_user : const User&, in_onStopJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} killJob(in_jobId : const std::string&, in_user : const User&, in_onKillJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} cancelJob(in_jobId : const std::string&, in_user : const User&, in_onCancelJob : const OnControlJob&, in_onError : const OnError&) : void
    + {abstract} getNetworkInfo(in_jobId : const std::string&, in_user : const User&, in_onGetNetworkInfo : const OnGetNetworkInfo&, in_onError : const OnError&) : void
    + {abstract} getClusterInfo(in_user : const User&, in_onGetClusterInfo : const OnGetClusterInfo&, in_onError : const OnError&) : void
    + {abstract} removeJob(in_job : std::shared_ptr<Job>, in_onRemove : const OnOperationComplete&, in_onError : OnError&) : void
  }

  class AbstractOutputStream
  {
    + AbstractOutputStream(\n   in_jobOutputType : JobOutputType,\n   in_onData : const OnOutputStreamData&,\n   in_onError : const OnError&)
    + {abstract} initialize() : Error
    + {abstract} endStream() : Error
    # completeStream() : void
    # reportOutput(in_outputType : JobOutputType, in_output : const std::string& output) : void
    - getNextSeqId() : uint64_t
    # m_streamType : JobOutputType
    - m_nextSeqId : std::atomic<uint64_t>
    - m_onData : OnOutputStreamData
    - m_onError : OnError
  }

  class FileOutputStream #lightgreen
  {
    + FileOutputStream(in_jobOutputType : JobOutputType, in_stdoutFile : const FilePath&, in_stderrFile : const FilePath&, in_onData : const OnOutputStreamData&, in_onError : const OnError&)
    + initialize() : Error
    + endStream() : Error
    - {static} buildTailCommand(in_file : const FilePath&) : std::string
    - m_stdoutFile : FilePath
    - m_stderrFile : FilePath
  }

  interface IResourceUtilStream #lightblue
  {
    + {abstract} initialize() : Error
    + {abstract} endStream() : Error
    + {abstract} addRequestId(in_requestId : uint64_t) : void
    + {abstract} removeRequestId(in_requestId : uint64_t) : void
  }

  class AbstractResourceUtilStream
  {
    + AbstractResourceUtilStream(in_onData : const OnResourceUtilData&)
    + {abstract} initialize() : Error
    + {abstract} endStream() : Error
    + addRequestId(in_requestId : uint64_t) : void
    + removeRequestId(in_requestId : uint64_t) : void
    # completeStream() : void
    # reportOutput(in_resourceUtilization : const ResourceUtilization&)
    - m_onData : OnResourceUtilData
    - m_requestSequences : std::map<uint64_t, unit64_t>
    - m_mutex : boost::mutex
  }

  class TimedResourceUtilStream #lightgreen
  {
    + TimedResourceUtilStream(in_onData : const OnResourceUtilData&, in_seconds : unsigned int)
    + start() : void
    + cancel() : void
    + initialize() : Error
    + endStream() : Error
    + addRequestId(in_requestId : uint64_t) : void
    + removeRequestId(in_requestId : uint64_t) : void
    # onTimer(in_error : const Error&) : void
    # {abstract} getResourceUtilData() : void
    # reportOutput(in_resourceUtilization : const ResourceUtilization&)
    - m_onData : OnResourceUtilData
    - m_timer : boost::posix::time_duration
    - m_requests : std::map<uint64_t, uint64_t>
    - m_mutex : boost::mutex
  }

  class IJobStatusWatcher #lightblue
  {
    + {abstract} startWatching()
    + {abstract} stopWatching()
  }

  class AbstractJobStatusWatcher
  {
    + AbstractJobStatusWatcher(in_jobRepo : std::shared_ptr<IJobRepository>, io_jobStatusNotifier : std::shared_ptr<JobStatusNotifier>)
    # onTimer(in_error : const Error&) : void
    # {abstract} getJobStatuses(in_onGetJobStatuses : const OnGetJobStatuses&, in_onError : const OnError&) : void
    - m_jobRepo : std::shared_ptr<IJobRepository>
    - m_jobStatusNotifier : std::shared_ptr<JobStatusNotifier>
  }

  AbstractJobStatusWatcher .up. JPWNote

  IJobStatusWatcher <|.. AbstractJobStatusWatcher
  AbstractJobStatusWatcher -down-|> AbstractTimedEvent
  IJobStatusWatcher --> JobStatusNotifier : updates
  IResourceUtilStream <|.. AbstractResourceUtilStream
  IResourceUtilStream <|.. TimedResourceUtilStream
  AbstractTimedEvent <|-- TimedResourceUtilStream
}

package "Launcher Plugin Api" as LPApiPackage <<Rectangle>>
{
  note "Classes in this package are responsible for\nhandling the translation from the Launcher\nAPI to and from the IJobSource interface" as LPANote

  class AbstractPluginApi #lightblue
  {
    + {static} parseRequest(in_requestStr : const std::string&, out_request : Request*) : Error
    + handleBootstrap(in_bootstrapRequest : std::shared_ptr<BootstrapRequest>) : void
    + handleSubmitJob(in_submitJobRequest : std::shared_ptr<SubmitJobRequest>) : void
    + handleGetJob(in_getJobRequest : std::shared_ptr<GetJobRequest>) : void
    + handleGetJobStatus(in_getJobStatusRequest : std::shared_ptr<GetJobStatusRequest>) : void
    + handleControlJob(in_controlJobRequest : std::shared_ptr<ControlJobRequest>) : void
    + handleGetJobOutput(in_getJobOutputRequest : std::shared_ptr<GetJobOutputRequest>) : void
    + handleGetJobResourceUtil(in_getJobResourceUtilRequest : std::shared_ptr<GetJobResourceUtilRequest>) : void
    + handleGetJobNetwork(in_getJobNetworkRequest : std::shared_ptr<GetJobNetworkRequest>) : void
    + handleGetClusterInfo(in_getClusterInfoRequest : std::shared_ptr<GetClusterInfoRequest>) : void
    # {abstract} createJobSource() : std::shared_ptr<IJobSource>
    # {abstract} createJobRepository() : std::shared_ptr<IJobRepository>
    # {abstract} createJobStatusWatcher() : std::shared_ptr<IJobStatusWatcher>
    - m_jobSource : std::shared_ptr<IJobSource>
    - m_comms : std::shared_ptr<AbstractFrameworkCommunicator>
    - m_statusHandles : std::map<uint64_t, SubscriptionHandle>
    - m_jobRepository : std::shared_ptr<IJobRepository>
    - m_jobStatusNotifier : std::shared_ptr<JobStatusNotifier>
    - m_jobPruner : std::shared_ptr<JobPruner>
    - m_jobStatusWatcher : std::shared_ptr<IJobStatusWatcher>
  }

  class ClusterInfo
  {
    + ClusterInfo(in_name: const std::string&, in_type: const std::string&)
    + ClusterInfo(in_name: const std::string&, in_type: const std::string&, in_queues : const std::vector<std::string>&)
    + ClusterInfo(in_name: const std::string&, in_type: const std::string&, in_resourceLimitTypes : const std::vector<ResourceLimit::Type>&)
    + ClusterInfo(in_name: const std::string&, in_type: const std::string&, in_queues : const std::vector<std::string>&, in_resourceLimitTypes : const std::vector<ResourceLimit::Type>&)
    + toJson() : rapid_json::Object
    - m_name : std::string
    - m_type : std::string
    - m_queues : std::vector<std::string>
    - m_resourceLimitTypes : std::vector<ResourceLimit::Type>
  }

  class ResourceLimit
  {
    + ResourceLimit(in_type : ResourceLimit::Type, in_value : double, in_maxValue = 0.0 : double, in_defaultValue = 0.0 : double)
    + getType() : ResourceLimit::Type
    + getValue() : const std::string&
    + getDefaultValue() : std::optional<std::string>
    + getMaxValue() : std::optional<std::string>
    + toJson() :: rapid_json::Object
    - m_type : ResourceLimit::Type
    - m_value : std::string
    - m_defaultValue : std::optional<std::string>
    - m_maxValue : std::optional<std::string>
  }

  class NetworkInfo
  {
    + NetworkInfo()
    + NetworkInfo(in_ipAddresses : const std::vector<std::string>&)
    + NetworkInfo(in_host : const std::string&, in_ipAddresses
    - m_host : std::string
    - m_ipAddresses : std::vector<std::string>
  }

  class ControlJobResult
  {
    + ControlJobResult(in_isComplete : bool, in_status : const std::string&)
    + isComplete() : bool
    + getStatusMessage() : const std::string&
    + toJson() : rapid_json::Object
    - m_isComplete : bool
    - m_statusMessage : std::string
  }

  class HeartbeatTimer
  {
    + sendHeartbeat()
    # onTimer(in_error : const Error&) : void
  }

  class AbstractFrameworkCommunicator
  {
    + {abstract} sendResponse(in_response : const Response&) : void
    + start() : Error
    + stop() : void
    + waitForExit() : void
    + registerRequestHandler(in_type : Request::Type, in_handler : const Request
    # {abstract} doWaitForExit() : void
    # {abstract} doStart() : Error
    # {abstract} doStop() : void
    # m_requestHandlers : std::map<Request::Type, RequestHandler>
    # m_heartbeatTimer : std::shared_ptr<HeartbeatTimer>
  }

  class StdIOFrameworkCommunicator
  {
    + sendResponse(in_response : const Response&) : void
    # doWaitForExit() : void
    # doStart() : Error
    # doStop() : void
    - readNext() : Error
    - writeNext() : Error
    - reportError() : Error
    - m_numThreads : unsigned int
    - m_stdinStream : boost::asio::posix::stream_descriptor
    - m_stdoutStream : boost::asio::posix::stream_descriptor
    - m_onError : OnError
    - m_mutex : Mutex
    - m_stdinBuff : std::vector<char>
    - m_writeBuffer : std::queue<std::string>
  }

  class Request
  {
    + {abstract} getType() : Request::Type
    + getUser() : const User&
    + {static} fromJson(in_jsonObject : const rapid_json::Object&, out_request : std::shared_ptr<Request>) : Error
    # Request()
    # m_user : User
  }

  class SubmitJobRequest
  {
    + getJob() : std::shared_ptr<Job>
    - m_job : std::shared_ptr<Job>
  }

  class JobIdRequest
  {
    + getJobId() : const std::string&
    # m_jobId : const std::string&
  }

  class GetJobStatusRequest
  {
    + isCancel() : bool
    - m_isCancel : bool
  }

  class ControlJobRequest
  {
    + getOperation() : ControlOperation
    - m_operation : ControlOperation
  }

  class GetJobOutputRequest
  {
    + getOutputType() : JobOutputType
    - m_outputType : JobOutputType
  }

  class Response
  {
    + serialize() : std::string
    + {abstract} getType() : Response::Type
    # m_data : rapid_json::Object
  }

  class GetJobResponse
  {
    + GetJobResponse(in_job : std::shared_ptr<Job>)
    - m_job : std::shared_ptr<Job>
  }

  class GetJobStatusResponse
  {
    + GetJobStatusResponse(in_job : std::shared_ptr<Job>)
    - m_job : std::shared_ptr<Job>
  }

  class ControlJobResponse
  {
    + ControlJobResponse(in_result : const ControlJobResult&)
    - m_result : ControlJobResult
  }

  class GetJobOutputResponse
  {
    + GetJobOutputResponse(in_output : const std::string&, in_outputType : JobOutputType, in_isComplete : bool)
    + GetJobOutputResponse(in_isComplete : bool)
    + toJson() : rapid_json::Object
    - m_output : std::string
    - m_outputType : JobOutputType
    - m_isComplete : bool
  }

  class GetJobResourceUtilResponse
  {
    + GetJobResourceUtilResponse(in_cpuTime : const std::optional<double>&, in_cpuPercent : const std::optional<double>&, in_virtualMemory : const std::optional<double>&)
    + toJson() : rapid_json::Object
    - m_cpuTime : std::optional<double>
    - m_cpuPercent : std::optional<double>
    - m_residentMemory : std::optional<double>
    - m_virtualMemory : std::optional<double>
  }

  class GetJobNetworkResponse
  {
    + GetJobNetworkResponse(in_host : const std::string&, in_ipAddress : const std::vector<std::string>&)
    + toJson : rapid_json::Object
    - m_host : std::string
    - m_ipAddress : std::vector<std::string>
  }

  class GetClusterInfoResponse
  {
    + GetClusterInfoResponse(in_clusterInfo : const ClusterInfo&)
    - m_clusterInfo : ClusterInfo
  }

  class ErrorResponse
  {
    + ErrorResponse(in_error : Error)
    - m_error : Error
  }

  class AbstractMain #lightblue
  {
    + {static} main(argc : int, argv : char**) : int
    + {abstract} createLauncherPluginApi() : AbstractPluginApi
  }

  together
  {
    enum "Request::Type" <<enum class>>
    {
      + HeartbeatRequest : 0
      + BootstrapRequest : 1
      + SubmitJobRequest : 2
      + GetJobRequest : 3
      + GetJobStatusRequest : 4
      + ControlJobRequest : 5
      + GetJobOutputRequest : 6
      + GetJobResourceUtilRequest : 7
      + GetJobNetworkRequest : 8
      + GetClusterInfoRequest : 9
    }

    enum "Response::Type" <<enum class>>
    {
      + ErrorResponse = -1
      + Heartbeat = 0
      + BootstrapResponse = 1
      + GetJobResponse = 2
      + GetJobStatusResponse = 3
      + ControlJobResponse = 4
      + GetJobOutputResponse = 5
      + GetJobResourceUtilResponse = 6
      + GetJobNetworkResponse = 7
      + GetClusterInfoResponse = 8
    }

    enum "ResourceLimit::Type" <<enum class>>
    {
      + CpuCount
      + CpuFrequency
      + CpuSet
      + CpuTime
      + Memory
      + MemorySwap
    }

    enum ControlOperation <<enum class>>
    {
      + Suspend = 0
      + Resume = 1
      + Stop = 2
      + Kill = 3
      + Cancel = 4
    }

    enum JobOutputType <<enum class>>
    {
      + Stdout = 0
      + Stderr = 1
      + Both = 2

      + fromString(in_typeStr : const std::string&)
    }
  }

  AbstractMain --> AbstractPluginApi : creates
  AbstractFrameworkCommunicator --> AbstractPluginApi : uses
  AbstractPluginApi *--> IJobSource : creates
  AbstractPluginApi *--> IJobRepository : creates
  AbstractPluginApi *--> JobStatusNotifier : creates
  AbstractPluginApi *--> JobPruner : creates
  AbstractPluginApi *--> IJobStatusWatcher : creates
  HeartbeatTimer --|> AbstractTimedEvent
  AbstractFrameworkCommunicator *-- HeartbeatTimer
  AbstractFrameworkCommunicator <|-- StdIOFrameworkCommunicator

  Request <|-- BootstrapRequest
  Request <|-- SubmitJobRequest
  Request <|-- JobIdRequest
  JobIdRequest <|-- GetJobRequest
  JobIdRequest <|-- GetJobStatusRequest
  JobIdRequest <|-- ControlJobRequest
  JobIdRequest <|-- GetJobOutputRequest
  JobIdRequest <|-- GetJobResourceUtilRequest
  JobIdRequest <|-- GetJobNetworkRequest
  Request <|-- GetClusterInfoRequest

  Response <|-- HeartbeatResponse
  Response <|-- BootstrapResponse
  Response <|-- GetJobResponse
  Response <|-- GetJobStatusResponse
  Response <|-- ControlJobResponse
  Response <|-- GetJobOutputResponse
  Response <|-- GetJobResourceUtilResponse
  Response <|-- GetJobNetworkResponse
  Response <|-- GetClusterInfoResponse
  Response <|-- ErrorResponse

  HeartbeatTimer .right. JPWNote
}


package "Typedef Reference" as TDPackage <<Rectangle>>
{
  hide <<typedef>> circle
  hide <<typedef>> methods

  class OnError <<typedef>>
  {
    {field} std::function<void(const Error&)>
  }

  class OnJobStatusUpdate <<typedef>>
  {
    {field} std::function<void(JobPtr)>
  }

  class OnTimer <<typedef>>
  {
    {field} std::function<void(bool)>
  }

  class OnOperationComplete <<typedef>>
  {
    {field} std::function<void()>
  }

  class OnJobPrune <<typedef>>
  {
    {field} std::function<void(std::shared_ptr<Job>, const OnOperationComplete&, const OnError&)>
  }

  class OnBootstrap <<typedef>>
  {
    {field} std::function<void(std::shared_ptr<BootstrapRequest>)>
  }

  class OnGetJobStatuses <<typedef>>
  {
    {field} std::function<void(const JobList&)>
  }

  class OnGetJob <<typedef>>
  {
    {field} std::function<void(std::shared_ptr<Job>)>
  }

  class OnGetNetworkInfo <<typedef>>
  {
    {field} std::function<void(const NetworkInfo&)>
  }

  class OnGetClusterInfo <<typedef>>
  {
    {field} std::function<void(const ClusterInfo&)>
  }

  class OnControlJob <<typedef>>
  {
    {field} std::function<void(const ControlJobResult&)>
  }

  class OnResourceUtilData <<typedef>>
  {
    {field} std::function<void(const ResourceUtilization&)>
  }

  class JobList <<typedef>>
  {
    std::vector<std::shared_ptr<Job>>
  }

  class JobStatusSubscriptionHandle <<typedef>>
  {
    std::shared_ptr<JobStatusSubscription>
  }

  class JobStatusSignal <<typedef>>
  {
    {field} boost::signals2::signal<void(JobPtr)>
  }

  class JobIdMap <<typedef>>
  {
    std::map<std::string, std::shared_ptr<Job>>
  }

  class RequestHandler <<typedef>>
  {
    boost::variant<*Request>
  }

  OnError -[hidden] OnJobStatusUpdate
  OnJobStatusUpdate -[hidden] OnTimer
  OnTimer -[hidden] OnJobDeleted
  OnJobDeleted -[hidden] OnJobPrune
  OnError -down[hidden]- OnGetJobStatuses
  OnGetJobStatuses -[hidden]- OnBootstrap

  OnGetJobStatuses -down[hidden] JobList
  JobList -[hidden] JobStatusSubscriptionHandle
  JobStatusSubscriptionHandle -[hidden] JobStatusSignal
  JobStatusSignal -[hidden] JobIdMap
}

' The default layout is not very nice. This section helps to mitigate some of the layout issues.
Request -[hidden] Response
Response -[hidden] AbstractFrameworkCommunicator

JobApiPackage -[hidden]- System
LPApiPackage -[hidden]- JMPackage
LPApiPackage -[hidden]- JobApiPackage
Logging -[hidden]- JMPackage
@enduml
